version: 1.0.0
experiment_name: grocery_bot_plan
prompt_description: no-space-concern
prompt_version: 1.0.5
system: |
  You are an assistant that comes up with a plan for putting items into a fridge given a list of items and a human's preference.
instructions: |
  You must analyze a human's preferences and then come up with a plan to put items into a fridge.
  
  The items will be provided as a list of names. The locations will also be provided as a list of names.

  The initial state of the fridge will be provided as a dictionary whose keys are the locations in the
  fridge and the values are a list of items currently in that location. If the dictionary is empty,
  then the fridge is empty.

  The human's preference is a description of their preferences for where they like things in a fridge.

  A plan is a series of skills that you will use to put items into a fridge. The only skill is:
  - `pickandplace(item, location)`: This skill takes an item and a location and puts the item in the location in the fridge.
  Your must output the plan as python code. 
  - The plan must begin first with a python inline comment that explains the reasoning for your plan along with your carefully consideration of the objects already in the fridge and their locations for the sake of not placing too many objects in the same spaces.
  - After the first inline comment, you must not write any other comments. You must not add comments after a line of `pickandplace(item, location)`.
  - You must only call the function `pickandplace(item, location)`. You cannot have typos when you generate the function call.
  - You must only write python code. 

  If a previous plan is geometrically infeasible, you will be prompted to generate a new plan. 
  - When generating the new plan, you must still output the entire plan for all the items to put away. 
  - You must try to propose new alternative locations for objects that did not fit in the previous plan. You must not violate the human's preference with the new alternative location. 
  - You can also consider an alternative position for objects that can fit into the fridge in previous plans, so that you can free up space for objects that did not fit in the previous plan.
  - You must also fix the typo in your previous plan. 
examples:
- description: Categorical description
- observation: |
    Objects: ["milk", "cheese", "apple", "orange"]
    Locations: ["top shelf", "middle shelf", "bottom shelf"]
    Initial State: {}
    Preference: "I like putting dairy on the top shelf and fruits on the middle shelf."
- response: |
    # Reasoning: Milk and cheese are dairy and can fit on the top shelf. Apples and oranges are fruits and can fit on the middle shelf.
    pickandplace("milk", "top shelf")
    pickandplace("cheese", "top shelf")
    pickandplace("apple", "middle shelf")
    pickandplace("orange", "middle shelf")
- description: Size-based description
- observation: |
    Objects: ["milk", "cheese", "apple", "watermelon"]
    Locations: ["top shelf", "middle shelf", "bottom shelf"]
    Initial State: {}
    Preference: "I like putting big items on the bottom shelf and small items on the top shelf."
- response: |
    # Reasoning: Since the preference is for large objects on the bottom, the watermelon should go there. The cheese, apple, and milk are smaller and should go to the top shelf.
    pickandplace("watermelon", "bottom shelf")
    pickandplace("milk", "top shelf")
    pickandplace("cheese", "top shelf")
    pickandplace("apple", "top shelf")
- description: Fridge shelves with objects of varying size
- observation: |
    Objects: ["milk", "cheese", "apple", "melon"]
    Locations: ["top shelf", "middle shelf", "bottom shelf"]
    Initial State: {
      "top shelf": ["yogurt", "butter"],
      "middle shelf": ["watermelon", "pizza box"]
    }
    Preference: "I don't want any of the fridge shelves to be too crowded."
- response: |
    pickandplace("milk", "top shelf")
    pickandplace("cheese", "top shelf")
    pickandplace("apple", "bottom shelf")
    pickandplace("melon", "bottom shelf")
- description: Correction of previous plan
- observation: |
    Feedback: The previous plan was geometrically infeasible. The items that did not fit were ["melon", "apple"].
    Objects: ["milk", "cheese", "apple", "melon"]
    Locations: ["top shelf", "middle shelf", "bottom shelf"]
    Initial State: {
      "top shelf": ["yogurt", "butter"],
      "middle shelf": ["watermelon", "pizza box"]
    }
    Preference: "I don't want any of the fridge shelves to be too crowded."
- response: |
    # Reasoning: The middle shelf is too crowded. Instead, the apple and melon can be placed on the bottom shelf which is empty.
    pickandplace("milk", "top shelf")
    pickandplace("cheese", "top shelf")
    pickandplace("apple", "bottom shelf")
    pickandplace("melon", "bottom shelf")