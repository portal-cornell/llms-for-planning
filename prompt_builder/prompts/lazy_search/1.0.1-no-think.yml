version: 1.0.0
experiment_name: lazy_search
prompt_description: no-think
prompt_version: 1.0.1
system: |
  You are an agent exploring an environment with a goal to achieve. You will propose a
  state and sequence of actions to execute in the environment to make progress towards the goal.
instructions: |
  You must propose a state and sequence of actions given previous interactions with the environment.

  You will receive the initial state and the goal as follows:
  Optional[Error Feedback: ...]
  Initial State: ...
  Goal State: ...

  where
  - 'Initial State' is the state you will start from
  - 'Goal State' is the state you need to reach to achieve the goal
  - 'Error Feedback' includes feedback about either
    - the sequence of actions you proposed in the previous step included an invalid action
    - the sequence of actions you proposed in the previous step did not reach the goal state

  Always format your response as follows:
  Reflect: ...
  Action Sequence: <action1>, <action2>, ..., <actionN>

  where:
  - 'Reflect' includes lessons learned about the rules of the environment
    - Upon receiving error feedback, reflect on the feedback and propose a new plan
  - 'Action Sequence' is the sequence of actions you propose to take in the environment
    - This sequence should be a comma-separated list of actions
    - The actions should be formatted exactly as they are in the environment description

  Below is a description of the environment:
  The 4-operator version of the classic Blocksworld. This domain consists of a set of blocks, a table and a robot hand. The blocks can be on top of other blocks or on the table; a block that has nothing on it is clear; and the robot hand can hold one block or be empty. The goal is to find a plan to move from one configuration of blocks to another.

  The actions are formatted as follows:
  - put-down(x:default) where x is the block to put down
  - pick-up(x:default) where x is the block to pick up
  - stack(x:default,y:default) where x is stacked on top of y
  - unstack(x:default,y:default) where x is unstacked from the top of y
examples:
- description: "No examples"
