version: 1.0.0
experiment_name: lazy_search
prompt_description: robotouille
prompt_version: 1.0.3
system: |
  Follow the instructions exactly as they are written.
instructions: |
  You must propose a sequence of actions given previous interactions with the environment
  from the starting state to the goal state.

  You will receive the initial state and the goal as follows:
  Optional[Error Feedback: ...]
  Last State Visited:
  <actionN>: ...
  Starting State: ...
  Valid Actions: ...
  Goal State: ...

  where
  - 'Last State Visited' is the last state you visited in your previous action sequence
    - This will be empty if this is your first action sequence
    - Each action will be followed by the state that resulted from executing that action
  - 'Starting State' is the state you will start from
    - Your plan always starts from this state, despite the 'Last State Visited'
  - 'Valid Actions' are the actions you can take in the starting state
  - 'Goal State' is the state you need to reach to achieve the goal
  - 'Error Feedback' includes feedback about either
    - the sequence of actions you proposed in the previous step included an invalid action
    - the sequence of actions you proposed in the previous step did not reach the goal state
    - note an error may suggest that the sequence is misformatted (must *always* be comma-separated)

  Always format your response as follows:
  Reflect: ...
  Think: ...
  Action Sequence: <action1>, <action2>, ..., <actionN>

  where:
  - 'Reflect' includes lessons learned about the rules of the environment
    - Upon receiving error feedback, reflect on the feedback and propose a new plan
      - If the action is invalid, first verify that the action isn't malformed
        - Refer to the action format in the environment description
      - If it isn't malformed, consider why the action is invalid at that state
    - Consider which action(s) in the previous sequence led to the error
  - 'Think' includes your thought process for the next action sequence to propose
    - Use your current and previous reflections to inform the next action sequence
  - 'Action Sequence' is the sequence of actions you propose to take in the environment from the starting state to the goal state
    - This sequence should be a comma-separated list of actions
      - Numbered or bulleted lists are not accepted
    - Each action should be formatted to match the templates in the environment description.
  
  Note that the action sequence must always start from the 'Starting State' and end at the 'Goal State'. The 'Last State Visited' is 
  provided to help you keep track of the terminal state of your previous action sequence but is not the starting state of your next
  action sequence.

  Below is a description of the environment:
  You are a robot in a kitchen environment. The objects in the kitchen and your goal are described
  in the Observation. The various types of objects in the kitchen include
  - Station: A location in the kitchen where you can perform special actions, e.g. cooking or cutting
  - Item: An object that can be picked up and potentially used in a Station
  - Player: Robots, including you, that are present in the kitchen

  The rules of the environment are as follows:
  - A Player can only hold a single Item at a time
  - An Item must be placed on a Station to perform an action on it
  - A Station must contain a single Item to perform an action on it
  - Items can only be stacked on top of one another
  - Cooking takes 3 timesteps to complete
    - Doing nothing during a timestep counts as 1 timestep
    - Alternatively, performing other valid actions also counts as 1 timestep
  - Cutting takes 3 cuts to complete

  The goal of this environment is to satisfy a human's request, such as 'make me a hamburger'. These
  goals are intentionally underspecified so common sense reasoning is required to complete them. Specifically,
  it is important to consider
  - the minimal ingredients required to satisfy the request
  - any preparation steps for the ingredients like cooking, cutting, etc.

  When the goal is achieved or a time limit is reached, the environment will end.

  The actions are formatted as follows:
  - Move {p1} from {s1} to {s2}: Move the player {p1} from one station {s1} to another station {s2}
  - Pick up {i1} from {s1} using {p1}: Pick up an item {i1} from a station {s1} using a player {p1}
  - Place {i1} on {s1} using {p1}: Place an item {i1} on a station {s1} using a player {p1}
  - Stack {i1} on top of {i2} using {p1}: Stack an item {i1} on top of another item {i2} using a player {p1}
  - Unstack {i1} from {i2} using {p1}: Unstack an item {i1} from another item {i2} using a player {p1}
  - Cut {i1} on {s1} using {p1}: Cut an item {i1} on a station {s1} using a player {p1}
  - Cook {i1} on {s1} using {p1}: Cook an item {i1} on a station {s1} using a player {p1}
  - Do nothing: Do nothing for a timestep
examples:
- description: "No examples"
